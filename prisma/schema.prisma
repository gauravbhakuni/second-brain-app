// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // For local development with PostgreSQL: postgres://user:pass@localhost:5432/dbname
}

/**
 * Enums
 */
enum Role {
  USER
  ADMIN
  OWNER
}

enum MembershipRole {
  MEMBER
  ADMIN
  OWNER
}

enum ContentType {
  NOTE
  TWEET
  VIDEO
  DOCUMENT
  LINK
}

enum Visibility {
  PRIVATE // only owner
  ORGANIZATION // visible to organization members
  PUBLIC // publicly accessible (if share allowed)
}

enum SubscriptionPlan {
  FREE
  PRO
  ENTERPRISE
}

enum SubscriptionStatus {
  TRIALING
  ACTIVE
  PAST_DUE
  CANCELED
  INCOMPLETE
}

/**
 * Models
 */

/**
 * Users of the application
 */
model User {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  email         String    @unique
  emailVerified DateTime?
  name          String?
  avatarUrl     String?
  passwordHash  String? // if supporting email/password auth
  role          Role      @default(USER)
  apiKeyOpenAI  String?
  apiKeyGemini  String?

  // Relations
  memberships        Membership[]
  organizationsOwned Organization[] @relation("OrgOwner")
  contentItems       ContentItem[]  @relation("OwnerContent")
  attachments        Attachment[]   @relation("UploaderAttachments")
  shareLinks         ShareLink[]    @relation("CreatorShareLinks")
  auditLogs          AuditLog[]     @relation("ActorAuditLogs")
  tags               Tag[]          @relation("UserTags")

  // NextAuth (optional)
  accounts Account[]
  sessions Session[]
}

/**
 * Organizations / Tenants
 */
model Organization {
  tags         Tag[]    @relation("OrgTags")
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  name         String
  slug         String   @unique
  billingEmail String?
  // Owner relation
  ownerId      String
  owner        User     @relation("OrgOwner", fields: [ownerId], references: [id], onDelete: Cascade)

  // Relations
  memberships   Membership[]
  contentItems  ContentItem[]
  subscriptions Subscription[]
  auditLogs     AuditLog[]

  @@index([slug])
}

/**
 * Membership: user belongs to organization with a role
 */
model Membership {
  id             String         @id @default(uuid())
  userId         String
  organizationId String
  role           MembershipRole @default(MEMBER)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@index([organizationId])
}

/**
 * Polymorphic content items (notes, links, videos, documents, tweets).
 * Keeps schema simpler and extensible.
 */
model ContentItem {
  id          String      @id @default(uuid())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  deletedAt   DateTime?
  title       String?
  excerpt     String?
  content     String? // markdown / text body (notes) or caption
  metadata    Json? // provider-specific metadata (tweet id, video duration, etc.)
  url         String? // for links/videos
  type        ContentType @default(NOTE)
  visibility  Visibility  @default(PRIVATE)
  pinned      Boolean     @default(false)
  archived    Boolean     @default(false)
  published   Boolean     @default(false)
  publishedAt DateTime?

  // Owner (user) and tenancy (nullable org)
  ownerId String
  owner   User   @relation("OwnerContent", fields: [ownerId], references: [id], onDelete: Cascade)

  organizationId String? // optional: content belongs to org
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Relations
  attachments Attachment[]
  tags        ContentItemTag[]
  shareLinks  ShareLink[]
  auditLogs   AuditLog[]       @relation("TargetAuditLogs")

  @@index([ownerId])
  @@index([organizationId])
  @@index([type])
}

/**
 * Tags and join table
 */
model Tag {
  id             String   @id @default(uuid())
  name           String
  slug           String
  color          String? // optional color hex
  ownerId        String? // user who created the tag (optional)
  organizationId String? // if tag scoped to an organization
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  owner        User?            @relation("UserTags", fields: [ownerId], references: [id], onDelete: SetNull)
  organization Organization?    @relation("OrgTags", fields: [organizationId], references: [id], onDelete: Cascade)
  contentItems ContentItemTag[]

  @@unique([slug, organizationId], name: "tag_slug_org_unique") // slug uniqueness per org (or null)
  @@index([organizationId])
}

/**
 * Join table: ContentItem <-> Tag (many-to-many)
 */
model ContentItemTag {
  id            String   @id @default(uuid())
  contentItemId String
  tagId         String
  createdAt     DateTime @default(now())

  contentItem ContentItem @relation(fields: [contentItemId], references: [id], onDelete: Cascade)
  tag         Tag         @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([contentItemId, tagId])
  @@index([tagId])
}

/**
 * Attachments: files linked to content items
 */
model Attachment {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  url           String
  filename      String
  mimeType      String?
  size          Int?
  uploadedById  String?
  contentItemId String?

  uploadedBy  User?        @relation("UploaderAttachments", fields: [uploadedById], references: [id], onDelete: SetNull)
  contentItem ContentItem? @relation(fields: [contentItemId], references: [id], onDelete: Cascade)

  @@index([uploadedById])
  @@index([contentItemId])
}

/**
 * Share links for items: public links, tokens, expiration etc.
 */
model ShareLink {
  id            String    @id @default(uuid())
  token         String    @unique
  createdAt     DateTime  @default(now())
  expiresAt     DateTime?
  maxUses       Int? // optional usage cap
  uses          Int       @default(0)
  canEdit       Boolean   @default(false)
  createdById   String?
  contentItemId String

  createdBy   User?       @relation("CreatorShareLinks", fields: [createdById], references: [id], onDelete: SetNull)
  contentItem ContentItem @relation(fields: [contentItemId], references: [id], onDelete: Cascade)

  @@index([contentItemId])
}

/**
 * Subscriptions (per organization)
 */
model Subscription {
  id                   String             @id @default(uuid())
  organizationId       String
  plan                 SubscriptionPlan   @default(FREE)
  status               SubscriptionStatus @default(TRIALING)
  stripeSubscriptionId String?
  stripeCustomerId     String?
  currentPeriodEnd     DateTime?
  trialEndsAt          DateTime?
  cancelAtPeriodEnd    Boolean            @default(false)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId])
  @@index([organizationId])
}

/**
 * Audit logs for important actions
 */
model AuditLog {
  id             String   @id @default(uuid())
  organizationId String? // optional
  actorId        String? // user who acted
  targetId       String? // content item id or other resource id
  action         String // e.g. "note.create", "note.update", "user.login"
  meta           Json?
  ip             String?
  createdAt      DateTime @default(now())

  organization      Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  actor             User?         @relation("ActorAuditLogs", fields: [actorId], references: [id], onDelete: SetNull)
  targetContentItem ContentItem?  @relation("TargetAuditLogs", fields: [targetId], references: [id], onDelete: Cascade)

  // target relation is intentionally loose (store id in targetId)
  @@index([organizationId])
  @@index([actorId])
}

/**
 * NextAuth-compatible models (optional) - keep if using NextAuth
 */
model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(uuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String?  @unique

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

/**
 * Optional verification tokens for sign-in flows
 */
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
